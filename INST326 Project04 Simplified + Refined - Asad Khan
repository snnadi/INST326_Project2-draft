"import tkinter as tk"
from tkinter import ttk, filedialog
import datetime
import random

class Note:
    """Manages individual notes, including metadata, edit history, and undo functionality."""
    def __init__(self, title, text, meta):
        self.title = title
        self.text = text
        self.meta = meta
        self.edit_history = []

    def edit(self, new_title, new_text):
        """Stores the current state before updating the note's title and text."""
        self.edit_history.append((datetime.datetime.now(), self.title, self.text))
        self.title = new_title
        self.text = new_text

    def undo_last_edit(self):
        """Reverts to the most recent state from the edit history."""
        if self.edit_history:
            _, self.title, self.text = self.edit_history.pop()

class CodeSnippet:
    """Manages code snippets with their own properties such as title, code, language, and description."""
    def __init__(self, title, code, language, description):
        self.title = title
        self.code = code
        self.language = language
        self.description = description

    def format_snippet(self):
        """Formats the code snippet for display or storage."""
        return f"### {self.title}:\n```{self.language}\n{self.code}\n```\n{self.description}"

class MainWindow(tk.Tk):
    """Main application window for managing notes and code snippets."""
    def __init__(self):
        super().__init__()
        self.geometry("800x800")
        self.title('Notebook')
        self.config(bg='light blue')
        self.notebook = []
        self.initialize_ui()

    def initialize_ui(self):
        """Sets up the user interface components."""
        self.style = ttk.Style()
        self.style.configure('Custom.TButton', foreground='black')

        ttk.Label(self, text="Preview title:").grid(row=0, column=0, padx=5, pady=5)
        self.note_title = ttk.Entry(self)
        self.note_title.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(self, text="Notes:").grid(row=1, column=0, padx=5, pady=5)
        self.note_text = tk.Text(self)
        self.note_text.grid(row=1, column=1, padx=5, pady=5)

        ttk.Button(self, text="New", command=self.create_new_note, style='Custom.TButton').grid(row=2, column=0, padx=5, pady=5)
        ttk.Button(self, text="Open", command=self.open_notebook, style='Custom.TButton').grid(row=2, column=1, padx=5, pady=5)
        ttk.Button(self, text="Save", command=self.save_notebook, style='Custom.TButton').grid(row=2, column=2, padx=5, pady=5)

    def create_new_note(self):
        """Creates a new note with data from UI and adds it to the notebook."""
        title = self.note_title.get()
        text = self.note_text.get("1.0", tk.END).strip()
        meta = f"Created: {datetime.datetime.now()}"
        self.notebook.append(Note(title, text, meta))
        self.refresh_notes()

    def refresh_notes(self):
        """Refreshes the list of notes in the UI."""
        # This function would update any UI elements listing notes.
        pass

    def open_notebook(self):
        """Loads notes from a file."""
        filepath = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if filepath:
            with open(filepath, "r") as file:
                for line in file:
                    title, text, meta = line.strip().split('||')
                    self.notebook.append(Note(title, text, meta))
                self.refresh_notes()

    def save_notebook(self):
        """Saves all notes to a file."""
        filepath = filedialog.asksaveasfilename(defaultextension=".txt")
        if filepath:
            with open(filepath, "w") as file:
                for note in self.notebook:
                    file.write(f"{note.title}||{note.text}||{note.meta}\n")

if __name__ == '__main__':
    main_window = MainWindow()
    main_window.mainloop()
