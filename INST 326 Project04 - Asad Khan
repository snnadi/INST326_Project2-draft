{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2cf3fae1-ef34-48cf-8614-b35ed3329bf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# INST 326 Project 4_ Asad Khan "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "179823ca-7b77-4966-9ffa-f2c9ed6e6c1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "import tkinter as tk\n",
    "from tkinter import ttk\n",
    "from tkinter import filedialog\n",
    "import datetime\n",
    "import random\n",
    "\n",
    "class BaseNote:\n",
    "    def __init__(self, title, text, meta):\n",
    "        self.title = title\n",
    "        self.text = text\n",
    "        self.meta = meta\n",
    "        self.edit_history = []\n",
    "\n",
    "    def edit(self, new_title, new_text):\n",
    "        edit_time = datetime.datetime.now()\n",
    "        self.edit_history.append((edit_time, self.title, self.text))\n",
    "        self.title = new_title\n",
    "        self.text = new_text\n",
    "\n",
    "class MakeNote(BaseNote):\n",
    "    pass\n",
    "\n",
    "class CodeSnippet(BaseNote):\n",
    "    def __init__(self, title, code, language, description, meta):\n",
    "        super().__init__(title, code, meta)\n",
    "        self.language = language\n",
    "        self.description = description\n",
    "\n",
    "class MainWindow(tk.Tk):\n",
    "    def __init__(self):  \n",
    "        super().__init__() \n",
    "        self.geometry(\"800x800\") \n",
    "        self.title('Notebook') \n",
    "        self.config(bg='light blue')\n",
    "        self.notebook = []\n",
    "        self.create_styles()\n",
    "        self.create_widgets()\n",
    "\n",
    "    def create_styles(self):\n",
    "        self.style = ttk.Style()\n",
    "        self.style.configure('Custom.TButton', foreground='black')\n",
    "        self.style.theme_use(\"default\")\n",
    "        self.style.configure(\"Vertical.TScrollbar\", troughcolor=\"light blue\", gripcount=0, gripmargin=0, gripthickness=0)\n",
    "        self.style.map(\"Vertical.TScrollbar\", background=[(\"active\", \"blue\"), (\"!active\", \"light blue\")])\n",
    "\n",
    "    def create_widgets(self):\n",
    "        ttk.Label(self, text=\"Preview title:\").grid(row=0, column=0, padx=5, pady=5)\n",
    "        self.note_title = ttk.Entry(self)\n",
    "        self.note_title.grid(row=0, column=1, padx=5, pady=5)\n",
    "\n",
    "        ttk.Label(self, text=\"Notes:\").grid(row=1, column=0, padx=5, pady=5)\n",
    "        self.note_text = tk.Text(self)\n",
    "        self.note_text.grid(row=1, column=1, padx=5, pady=5)\n",
    "\n",
    "        ttk.Button(self, text=\"New\", command=self.new_note, style='Custom.TButton').grid(row=2, column=0, padx=5, pady=5)\n",
    "        ttk.Button(self, text=\"Open\", command=self.open_notebook, style='Custom.TButton').grid(row=2, column=1, padx=5, pady=5)\n",
    "        ttk.Button(self, text=\"Save\", command=self.save_notebook, style='Custom.TButton').grid(row=2, column=2, padx=5, pady=5)\n",
    "        ttk.Button(self, text=\"Color\", command=self.color_change, style='Custom.TButton').grid(row=3, column=2, padx=5, pady=5)\n",
    "        ttk.Button(self, text=\"Restart\", command=self.restart, style='Custom.TButton').grid(row=3, column=0, padx=5, pady=5, sticky='ew')\n",
    "        ttk.Button(self, text=\"Search\", command=self.open_search_window, style='Custom.TButton').grid(row=3, column=1, padx=5, pady=5)\n",
    "\n",
    "        self.create_clock_and_timer()\n",
    "        self.create_scrollbar_and_bindings()\n",
    "\n",
    "    def create_clock_and_timer(self):\n",
    "        self.clock_label = ttk.Label(self, style='Custom.TButton', font=('Comic Sans MS', 15))\n",
    "        self.clock_label.grid(row=0, column=2, padx=5, pady=5, sticky='e')\n",
    "        self.timer_label = ttk.Label(self, text=\"00:00:00\", style='Custom.TButton', font=('Comic Sans MS', 15))\n",
    "        self.timer_label.grid(row=0, column=3, padx=5, pady=5, sticky='e')\n",
    "        self.update_clock()\n",
    "        self.timer_running = False\n",
    "        self.start_time = None\n",
    "        self.elapsed_time = datetime.timedelta(0)\n",
    "        self.update_timer()\n",
    "\n",
    "    def create_scrollbar_and_bindings(self):\n",
    "        scrollbar = ttk.Scrollbar(self, orient=tk.VERTICAL)\n",
    "        scrollbar.grid(row=1, column=2, sticky=tk.N+tk.S)\n",
    "        self.note_text.config(yscrollcommand=scrollbar.set)\n",
    "        scrollbar.config(command=self.note_text.yview)\n",
    "        self.bind(\"<Control-n>\", lambda event: self.new_note())\n",
    "\n",
    "    def update_clock(self):\n",
    "        self.clock_label.config(text=datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n",
    "        self.after(1000, self.update_clock)\n",
    "\n",
    "    def toggle_timer(self):\n",
    "        if self.timer_running:\n",
    "            self.timer_running = False\n",
    "            self.timer_button.config(text=\"Start Timer\")\n",
    "            self.after_cancel(self.timer_id)\n",
    "        else:\n",
    "            self.timer_running = True\n",
    "            self.timer_button.config(text=\"Stop Timer\")\n",
    "            self.start_time = datetime.datetime.now()\n",
    "            self.update_timer()\n",
    "\n",
    "    def update_timer(self):\n",
    "        if self.timer_running:\n",
    "            self.elapsed_time = datetime.datetime.now() - self.start_time\n",
    "            self.timer_label.config(text=str(self.elapsed_time).split(\".\")[0])\n",
    "            self.timer_id = self.after(100, self.update_timer)\n",
    "\n",
    "    def new_note(self):\n",
    "        self.note_title.delete(0, tk.END)\n",
    "        self.note_text.delete('1.0', tk.END)\n",
    "\n",
    "    def open_notebook(self):\n",
    "        filepath = filedialog.askopenfilename(initialdir=\"/\", filetypes=[(\"Text files\", \"*.txt\"), (\"All files\", \"*.*\")])\n",
    "        if filepath:\n",
    "            with open(filepath, \"r\") as file:\n",
    "                self.notebook = [MakeNote(title=line.strip(), text=file.readline().strip(), meta=file.readline().strip()) for line in file]\n",
    "            self.update_note_list()\n",
    "\n",
    "    def save_notebook(self):\n",
    "        filepath = filedialog.asksaveasfilename(defaultextension=\".txt\", filetypes=((\"Text files\", \"*.txt\"), (\"All files\", \"*.*\")))\n",
    "        if filepath:\n",
    "            with open(filepath, \"w\") as file:\n",
    "                for note in self.notebook:\n",
    "                    file.write(f\"{note.title}\\n{note.text}\\n{note.meta}\\n\")\n",
    "\n",
    "    def color_change(self):\n",
    "        colors = [\"#FFC0CB\", \"#ADD8E6\", \"#00008B\", \"#FFFFFF\", \"#FF0000\", \"#000000\"]\n",
    "        self.config(bg=random.choice(colors))\n",
    "\n",
    "    def restart(self):\n",
    "        self.destroy()\n",
    "        main_window = MainWindow()\n",
    "        main_window.mainloop()\n",
    "\n",
    "    def open_search_window(self):\n",
    "        print(\"Search window would be implemented here.\")\n",
    "\n",
    "    def update_note_list(self):\n",
    "        print(\"Update note list logic would be implemented here.\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main_window = MainWindow()\n",
    "    main_window.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5ae3e89-bf11-411a-9c2a-b85dc4da74a9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
